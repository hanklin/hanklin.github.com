<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gossip | Hank Lin]]></title>
  <link href="http://hanklin.com/blog/categories/gossip/atom.xml" rel="self"/>
  <link href="http://hanklin.com/"/>
  <updated>2013-03-22T10:47:20+08:00</updated>
  <id>http://hanklin.com/</id>
  <author>
    <name><![CDATA[Hank Lin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[nuance]]></title>
    <link href="http://hanklin.com/blog/2012/01/11/nuance"/>
    <updated>2012-01-11T21:15:58+08:00</updated>
    <id>http://hanklin.com/blog/2012/01/11/nuance</id>
    <content type="html"><![CDATA[<p>很久以前看英文的技術書時學到「nuance」這個字，查字典的解釋是「細微的差別」，例如音調、顏色、見解等細節的不同。</p>

<p>我喜歡這個字，是因為這個字代表每個個體的獨特性。以音樂來說，貝多芬的第九號交響曲的樂譜只有一種，但是不同的交響樂團，不同的指揮家，甚至不同的音樂廳，演奏出來的感覺都不同。而這些不同的版本就有個人喜好、意境的不同。節拍快0.1秒、音符修飾的1/100差異等等，這些用科學統計方法來看，不具顯著性的差異，但是卻能表現出不同的風格。例如福特萬格勒在拜魯特的貝九就被視為是經典詮釋。</p>

<p>有的指揮家認為，要完全遵照作曲家在樂譜上的指示，忠實的呈現出來，貫徹作曲家的意志。但有的指揮家覺得，樂譜有其表達力的限制，應該要適時揉合作曲家的作曲背景，並由指揮/演奏去詮釋作品。但不論是哪一種，都要有一定的能力才能達到。</p>

<p>我是Leica M相機的愛好者，這款高品質的德國相機，堅固耐用，功能非常少，他僅有的功能都是讓你能專注在「拍照」這件事上。用Leica M拍出來的照片，優異的暗部細節和寫實性，讓我非常的喜愛。看習慣用Leica M拍的照片之後，看一般的照片就會覺得「少了很多細節」。有些人看不出細節差異，但是我剛好是看得出來的那種。</p>

<p>回到軟體開發上面，「nuance」這個字就更重要了。軟體開發雖然是一種「創作」，但是本質上和「演奏」比較像。演奏要以「樂譜」為本，加上演奏者的詮釋。而軟體開發也是有一個目標，例如「需求」，再由開發者去詮釋。但是這個目標不像樂譜，有非常明確的規範，所以開發者能夠發揮的空間非常的大。就算再詳細的設計文件，在真正實作時，還是有一大段空間要填滿。</p>

<p>例如，我想做一個線上購物網站，這是目標，但是在作出來之前，沒有人知道這個網站將來會長什麼樣。就算網頁看起來一模一樣好了，也許背後用的技術完全不同，也許scalability不同，也許performance不同，也許cost不同。而這一切一切的不同，就是由許多開發時的選擇累積出來的。這些自由選擇(詮釋方式)，就是我所說的軟體nuance。</p>

<p>所以，軟體的開發者、設計者、架構者所作的大大小小的選擇，也就決定了這個系統的個性。和音樂一樣，在達到一定水準之後，沒有絕對的對錯，就只有「品味」(或喜好)的問題了。例如：貝九我可能比較喜歡卡拉揚的版本。</p>

<p>對軟體工程師來說，要有能力控制nuance，就必需要不斷增加見識廣度和技術深度，也要保持一顆熱情開放的心，願意嘗試新的東西，不能習慣於過去的作法。我的經驗是，我以為我已經看得夠廣夠深了，在和不同領域的人談過之後，我才發現自己看得太少了。同時，也要能培養出辨別「nuance」的能力，要知道作這個選擇會有什麼影響。</p>

<p>品質，是由許多小細節累積而成的，讓我們一起勉勵！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[blue pill or red pill?]]></title>
    <link href="http://hanklin.com/blog/2011/10/27/blue-pill-or-red-pill"/>
    <updated>2011-10-27T20:34:02+08:00</updated>
    <id>http://hanklin.com/blog/2011/10/27/blue-pill-or-red-pill</id>
    <content type="html"><![CDATA[<p>真的很久沒更新了。
標題又是用The Matrix裡的梗，可是圖都有版權的，不能用。
工作繁重不能當作藉囗，有辦法的人還是能有規律的產出新内容。像<a href="http://mrjamie.cc/">Jamie Lin</a>，現在每天一篇啊，會不會太厲害了一點。</p>

<p>要寫blog，就像駭客任務裡的莫非斯給你的選擇。你可以選擇藍色藥丸，繼續過習慣的生活。或是選擇紅色藥丸，很辛苦地試著對生活進行革命。Your choice。</p>

<p>沒錯，革命哪有不辛苦的。寫第一本書的時候，我採用硬撐的方式。把睡覺時間拿來寫稿，沒錯，結果是出來了，但是畢竟不是長久之計。身為<a href="http://mrjamie.cc/2011/05/14/hack-everything/">hack everything</a>的人，不能繼續這樣作。</p>

<p>所以，要工作、要休息、要看資料，要陪家人，還要寫作，這到底要怎麼作到？別急，我也在試，總會有辦法的。</p>

<p>總之，是到了繼續的時候了。和之前說的一樣，我會把新書的內容，用<a href="http://hanklin.com/">blog</a>的形式發表。每一篇都可能不完整、沒有前後文、鬼打牆、或是不通順，都是屬於正常現象，請小心服用。</p>

<p>除了原稿，我還必需建立幾個open source的專案，作為工具和framework。所以真的是大工程，有點像挖坑給自己跳。的確，追求完美的性格又發作了。</p>

<p>對我要寫的內容有任何疑問和建議，都可以提出來，我會參考。但是不一定有時間回應，因為我要繼續前進。發表過的內容也可能重新改寫，所以如果你覺得這篇和你之前看的不同，就忘了過去吧，現在的比較重要。</p>

<p>又到了最難的結尾了，這裡有一個<a href="http://www.facebook.com/hank.web">facebook自high粉絲頁</a>好少人的，有需要就按這個讚(遞)。&lt;fb:like href="http://www.facebook.com/hank.web" send="false" layout="button_count" width="450" show_faces="true">&lt;/fb:like></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Blogging]]></title>
    <link href="http://hanklin.com/blog/2011/06/15/why-blogging"/>
    <updated>2011-06-15T20:51:17+08:00</updated>
    <id>http://hanklin.com/blog/2011/06/15/why-blogging</id>
    <content type="html"><![CDATA[<p>常常沒有人問我, 為什麼要寫blog? (沒錯, 是"沒有人", 這句只是為了學各大blogger常見的開頭...)
請看Jamie的: <a href="http://mrjamie.cc/2011/03/30/start-blogging-now/">你必須開一個網誌，現在</a>. 其實最早也是Jamie鼓勵我寫blog的, 我常常說, 沒有Jamie, 就沒有這個blog, 也沒有出書, 也沒有今天的我.</p>

<p>在這裡說的blog, 不是給自己和認識的人看的, 而是為了這個世界創造更多的價值, 不論是自己, 讀者, 或整個與你相關的環境. 像我是軟體工程師, 我可以把我的經驗分享出來, 讓有需要的人, 可以很快的找到方向. 這樣一來, 不但為別人創造了價值, 我自己也增加了無型的價值. 所以, 各行各業都可以寫blog, 不論目的是什麼, 你都可以造成一些影響. 這在網路還沒發達之前是不可能的事, 如果你對現在的媒體很不滿, 那網路就是你最好的發聲管道. 我要很明確的告訴你, 寫blog絕不是一件簡單的事. 如果沒有決心, 那就把它當成休閒就好, 不要期望寫blog能帶給你什麼額外的回饋. 每天上班就已經快累死了, 回到家只想休息啊. 生活上還有很多雜事要處理: 帳單還沒付, 電腦壞了要修, 車子要檢查. 即使是有空的時間, 我也可能和人吵架影響心情, 生病看醫生, 很多文件/書要看, 要靜下心來整理資料寫一篇有內容的文章還真是難啊!</p>

<p>像這個: <a href="http://mrjamie.cc/2011/05/19/quit-your-job-get-paid-change-the-world/">如何辭掉你的工作，改變這個世界，還有人付錢給你</a>. 是很難達到的, 而且也不適合每一個人. 但是如果你想除了每個月領薪水, 還能創造出你和別人不一樣的價值的話, 那寫blog是一個很好的開始. (怎麼有點像直銷的語氣?!) 很多人都覺得在台灣engineer不值錢, 而且沒辦法作到老(這是重點, 逼得engineer一定要轉manager或analysis, designer. 薪水高的資深engineer似乎是被砍的高危險群), 其實我認識很多人真的很厲害, 但是沒什麼人知道. 如果他們能利用網路這個媒體, 貢獻他們的知識, 也可以順便提昇自己的價值. 我一直覺得, 會寫程式沒什麼了不起, 快快樂樂學○○這類的書看一下就會寫了. 所以也難怪很多人真的不覺得軟體工程師有什麼價值. 但是了不起的地方在於, 完成一種功能的寫法有無限多種, 哪一種才是最適合的寫法? 這就是為什麼要看高手的code, 看高手的code可以快速增加功力, 一定要思考為什麼他要這樣寫, 如果能舉出這樣寫的利和弊, 以後就可以納為已用. 我看了高手寫的code常常會有, 哦! 原來還有這種寫法, 以前都沒想過. 從另一個角度來看, 你怎麼告訴別人(或客戶), 你設計的架構是比較好的. 同樣的目的, 為什麼要改用你的方法? 舉個例子, CSS每個人都會寫, 但是要render的快, 容易維護, 減少陷阱, 並且在各browser都可以用, 這是很困難的, 但是你能整理出來嗎? 另外, 軟體的東西那麼多, 如果你有用過的經驗, 是不是能很快的作出適合的決定. 例如: 為什麼在這個場合我不要用Hibernate, 在那個地方我要用Spring, 如果你能分析出來, 就是價值所在, 也就是資深工程師厲害的地方. 一但能寫一些有價值的東西, 別人自然就會相信你是這方面的高手, 有機會自然就會找你.
以前看過一個tweet, 寫的是說: 寫blog的人真是佛心來的啊!  這句話的意思是很感謝blogger能分享他的知識, 但是我想另一方面也代表經營blog真的要花很多心思. 我認為一開始不要很功利的角度去寫, 而是要真正把知識整理好, 如果你寫的好, 不用擔心, 自然就會有更多的正回饋, 自由網路的世界是不會讓你埋沒太久的.</p>

<p>這個星期五(2011-06-17)我在元智大學資訊工程學系有演講, 可以參考這個海報 ;)
<a href="http://hanklin.com/blog/wp-content/uploads/2011/06/ssv16.jpg"><img src="http://hanklin.com/blog/wp-content/uploads/2011/06/ssv16-740x1024.jpg" alt="" title="ssv16" width="740" height="1024" class="alignnone size-large wp-image-268" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts about Terracotta]]></title>
    <link href="http://hanklin.com/blog/2011/05/24/thought-about-terracotta"/>
    <updated>2011-05-24T08:10:11+08:00</updated>
    <id>http://hanklin.com/blog/2011/05/24/thought-about-terracotta</id>
    <content type="html"><![CDATA[<h2>Software AG acquires Terracotta</h2>


<p>好啦, <a href="http://terracotta.org/">Terracotta</a>不像Groupon、Twitter之類的受人囑目, 因為這畢竟是阿宅工程師才知道的東西, 被賣了也沒什麼人注意. 我和Terracotta有關是因為很久以前就看到Terracotta的文章, 看他寫得很神奇, 可以把多個JVM串起來, clustering成一個大JVM一樣. 會開始用也是因為, 在EC2上不支援multicast, 而大部份的session replication或distributed caching機制都依賴multicast, 所以開始使用terracotta作session replication. 效果還滿不錯. 只是還沒有試到很大scale.
被買走也算是完美出場了, 這些工程師也可以無憂無慮地再作好下一個產品, 真令我羨慕啊! 做出好用、有人用的東西, 才是我們工程師真正應該作的事.</p>

<h2>Terracotta bashed</h2>


<p>其實我認為Terracotta的廣告很成功, 甚至有點誇大, 所以生意才作得起來. 但是同時我也覺得, Terracotta並不是一個差勁的產品, 而是一個好的產品. 廣告是誇大了點, 但是至少解決了我的問題. 不過大概從2006年起, 只要terracotta有文章(不論是不是像廣告), 大概都有一堆人來圍勦. 就說你這是舊技術換個名詞而已啦, 或是你的scalability很差之類的. 從theserverside吵到infoq, 例如最近的一篇:  <a href="http://www.infoq.com/news/2010/09/bigmemory">Terracotta's BigMemory Aiming to Eliminate Garbage Collection for Java Caches</a> , 就被Gridgain, Gigaspaces圍毆, 連Oracle Coherence都來踹一腳. 沒錯, terracotta一直改產品名字, 換湯不換藥, 我也很不喜歡, 不過他確實work啊, 所以我實在搞不懂他們有什麼恩怨情仇. 也許哪天我試用看看gridgain或gigaspaces產品之後, 就會覺得他們真的比較棒也不一定...</p>

<p>台灣的工程師真的棒, 我也希望能做出一個大事業, 像terracotta這樣就很好, 作出真正好用的東西, 讓很多人方便地使用.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[閒聊Google Chrome]]></title>
    <link href="http://hanklin.com/blog/2010/05/27/google-chrome"/>
    <updated>2010-05-27T03:15:29+08:00</updated>
    <id>http://hanklin.com/blog/2010/05/27/google-chrome</id>
    <content type="html"><![CDATA[<h2>勞苦功高的Browsers</h2>


<p><a href="http://en.wikipedia.org/wiki/Web_browser">Web browser</a> 可不是一個單純的application. 一但接上網路, 就有無限的可能. Server端更新功能, Client端就能馬上使用. 而且web application可以是super scalable的, 現在使用者最多的application, 像是facebook, twitter 都是web applications. 如果想要作一個Browser, 可不是簡單起個案子, 請10個工程師弄個2年就可以作出來了. 現在的Browser可是身負重任, 負責現今使用者大部份的網路活動. 一般的使用流程, 就是先去使用者打的網址, 把HTML文件抓下來, HTML文件裡可能有各種各樣的resources, 如: JavaScript, CSS, 圖檔, Flash, Java Applet 等等. Browser要知道應該對什麼東西作什麼事, 該下載的再去下載, 該run的去run一run, 然後把結果render在畫面上. 而且還要有extensions/plugins, 滿足開發者和使用者的要求. 還有還有, Browser還要試著幫忙修正錯誤的HTML, CSS, JavaScript, 以避免粗心的開發者寫個<div><p></div></p> 就整組壞去. 最後, 以上一切的動作都要<a href="http://googleresearch.blogspot.com/2009/06/speed-matters.html">快! 快! 快! </a> 現代人是很沒耐心的, 一秒鐘是幾十萬上下的啊!
好吧, 光這個規格開下來就沒人敢作了, 所以主流還是只有Microsoft的IE. 沒辦法, 曾經高達95%的market share, 還是得針對它開發web applications. &nbsp;(雖然IE有很多問題一直被罵) &nbsp;Firefox出來後, 真是的有如救星啊! 好用的bookmark, 可以多個tabs, 符合W3C標準, 許多好用的plugins, 還有最重要的, 跑起來至少比IE6快10倍以上咩! 其中Firebug 這個plugin真是開發者的好朋友啊! 到現在還是必須的plugin. 不過即使Firefox那麼好, 到現在market share還是只有大約30%, 所以可憐的工程師還是要和古怪的IE6奮戰. 如果考量到小小的Mozilla要和大大的Microsoft對抗, Windows內建IE等等不利因素, 這個結果還算是不錯咩, 只能說Windows賣得太好, IE又一直不進步. 所以很多人根本不知道什麼是Firefox, 在他們心中:</p>

<pre class="brush:java">Browser == IE</pre>


<p>的結果會是<code>true</code>. 所以, Firefox就還是只有宅男/Geek/工程師拿來自爽用而已. 但是...</p>

<h2>突然出現的Chrome</h2>


<p>在2008年9月, 有一天我正要下班時, 上網看一看最新的新聞. 竟然看到了一種10年才可能出現一次的新聞. 那就是: <a href="http://googleblog.blogspot.com/2008/09/fresh-take-on-browser.html">Google要出Browser了!</a> 那時候Google 是先出一個<a href="http://www.google.com/googlebooks/chrome/">Chrome廣告的漫畫</a>. 看完這個漫畫就很期待, Chrome開放的當天就趕快下載來用用了. 那時的感覺是, 快雖快, 但是整個還是非常陽春. bookmark難用, flash常crash, 字也和狗啃的一樣, 也沒有別的plugins, 整個用起來就是很不順手. 但是, 不到2年, Chrome的版本也從0.2快速升到5.0 (這年頭大家的版本的增加速度都在比快的), 在補強了一些常用功能, 還有<a href="http://lifehacker.com/5547211/fix-the-webs-biggest-annoyances-with-google-chrome">一些好用的 chrome extensions</a> 漸漸出來以後. Chrome現在也是我主要使用的browser了. 不過我在開發的時候, 還是使用Firefox, 沒辦法, Firebug還是比Chrome的developer tools 好用太多了. 如果你只是一般使用者, 那你可以安心的使用chrome咩!
Chrome強調的最大特點就是: <a href="http://code.google.com/speed/">快! 快! 快!</a> Chrome用的JavaScript engine 叫<a href="http://code.google.com/p/v8/">V8</a> , 就是號稱輕量又快速. 我的laptop在<a href="http://v8.googlecode.com/svn/data/benchmarks/current/run.html">V8 benchmark</a> 上用Chrome 5.0可以得到 <code>5468</code>分(越大越好), Firefox 3.6只有<code>527</code>分. <a href="http://www2.webkit.org/perf/sunspider-0.9/sunspider-driver.html">SunSpider JavaScript Benchmark</a> 則是Chrome 5.0得到<code>306.0ms</code>(越小越好) Firefox 3.6 則是<code>830.2ms</code>. Chrome用的layout engine是Webkit, 也是和Firefox 用的Gecko有很大的不同. Webkit也是注重輕量和快速, Gecko則是<a href="http://arstechnica.com/open-source/news/2008/09/mozilla-committed-to-gecko.ars">功能較強大, 但是heavy-weight</a>
但是改進JavaScript和render的速度並不能很大量的改進效能. 棖據<a href="http://developer.yahoo.com/performance/rules.html">Yahoo!'s Exceptional Performance</a> 的研究, 最花時間的就是HTTP request, 所以針對HTTP requests 次數要少, request headers 要小, 要設cache headers, 要用Gzip, 要用CDN 等等都是為了在HTTP requests這一步能夠快一點. Google也在作一個新的Protocol想要取代HTTP, 叫<a href="http://dev.chromium.org/spdy">SPDY</a> , 號稱可以<a href="http://googleresearch.blogspot.com/2009/11/2x-faster-web.html">比HTTP 快上55%</a> . 要是再加上HTML5的offline storage, 和WebSocket, 真是令人期待啊! 可以想像將來真的是web application的時代咩!</p>

<p>Chrome在使用的感覺上確實有比Firefox快一些, 雖然一些功能還是比不上Firefox, 但日常使用也都夠了. 重新打造一個超快的Browser當然是很有成就感, 但是這就是Google 加入<a href="http://en.wikipedia.org/wiki/Browser_wars">Browser wars</a> 的原因嗎? 之前就有謠傳Google偷偷在開發OS, 不過Google一直沒證實. 開發OS又比開發Browser難了好幾個級數, 而且開發好了要怎麼和Microsoft火拼還是一大問題. 後來在2009年7月, Google發表了<a href="http://googleblog.blogspot.com/2009/07/introducing-google-chrome-os.html">Chrome OS 的消息</a>, 才真象大白. 原來是target在netbooks的OS, 開機就是Chrome, 當然裡面的application都是用web applications, 充份實現cloud computing的好處. 不過Chrome OS實在和<a href="http://www.android.com/">Android</a> 太過接近了, 真是令人猜不透Google想幹嘛. 要嘛不來, 一來就作2個. 我是希望Google能專心把Chrome作好就好了, netbook或smartphone就交給Android就好了, 雖然Google資源多, 但是一次專注在一件事情上, 把事情作好不是比較好嗎?</p>

<h2>Browser Wars</h2>


<p>使用者習慣不是一朝一夕可以改過來的, IE獨佔市場快10年了, Windows內建IE, 可以用就好了咩, 所以很難說什麼: "IE比較難用咩, 所以你裝好Windows之後要去下載Firefox/Chrome來用." 這種理由去讓一般使用者改用別的browser. 到現在還有存在很多網站(尤其是國內的一些網路銀行頁面), 是只能用IE去看的, 用其他Browser去看的話, 不是layout亂掉不能用, 就是mouse event都沒用, hover或點下去沒反應. IE在1999年開始獨霸browser market之後, 大概從2005年才一點一點(真的很慢, 幾乎察覺不出來, 哈哈!)的流失給Firefox. 而Chrome 是Google做的, Google品牌夠大, 要推Chrome也不像沒錢的Mozilla那樣沒力. 目前Chrome也有約7%的market share了. 但是Microsoft也不是省油的燈, 怎麼可能坐視不管呢? <a href="http://ie.microsoft.com/testdrive/">IE9</a> 預計2011年要出, 這終於是可以和Chrome或Firefox相比的Browser了! 最大的改變就是大力支援W3C標準. 看了<a href="http://ie.microsoft.com/testdrive/benchmarks/SunSpider/Default.html">SunSpider Test</a> , <a href="http://ie.microsoft.com/testdrive/benchmarks/Acid3/Default.html">Acid3 Test</a> , <a href="http://ie.microsoft.com/testdrive/benchmarks/CSS3info/Default.html">CSS selector Test</a> 和<a href="http://samples.msdn.microsoft.com/ietestcenter/">Internet Explorer Testing Center</a> 之後, 我覺得Microsoft終於有心把Browser做好了! 其實還是那句老話, 有競爭才有進步. 當Web不斷快速進步, 而Browser卻沒改進, 這是不會被接受的. 所以, 不論是IE 或Firefox, 只要符合W3C標準, 就是好Browser!
最後, 附一個Chrome的新廣告: <a href="http://www.youtube.com/watch?v=nCgQDjiotG0&amp;fmt=22#t=1m33">Google Chrome Speed Tests</a>(我直接快轉到閃電那段, 因為很酷咩!)</p>

<h3>Resources:</h3>


<p><a href="http://acid3.acidtests.org/">The Acid3 Test</a>
<a href="http://tools.css3.info/selectors-test/test.html">CSS3 Selectors Test </a>
<a href="http://samples.msdn.microsoft.com/ietestcenter/">Internet Explorer Testing Center </a>
<a href="http://developer.yahoo.com/performance/">Yahoo!'s Exceptional Performance</a>
<a href="http://code.google.com/speed/page-speed/docs/rules_intro.html">Web Performance Best Practices</a>
<a href="http://gs.statcounter.com/">StatCounter Global Stats - Browser, OS, Search Engine including Mobile Market Share</a>
<a href="https://chrome.google.com/extensions">Google Chrome Extensions</a></p>

<p><a href="http://www.amazon.com/gp/product/0596529309">High Performance Web Sites: Essential Knowledge for Front-End Engineers</a>
<a href="http://www.amazon.com/gp/product/0596522304">Even Faster Web Sites: Performance Best Practices for Web Developers</a></p>
]]></content>
  </entry>
  
</feed>
