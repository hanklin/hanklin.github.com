<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aws | Hank Lin]]></title>
  <link href="http://hanklin.com/blog/categories/aws/atom.xml" rel="self"/>
  <link href="http://hanklin.com/"/>
  <updated>2013-03-22T10:47:20+08:00</updated>
  <id>http://hanklin.com/</id>
  <author>
    <name><![CDATA[Hank Lin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AWS updates 2011-07]]></title>
    <link href="http://hanklin.com/blog/2011/07/12/aws-updates-2011-07"/>
    <updated>2011-07-12T11:43:11+08:00</updated>
    <id>http://hanklin.com/blog/2011/07/12/aws-updates-2011-07</id>
    <content type="html"><![CDATA[<p>上天是公平的, 每個人每天只有24小時. 所以如果你不是萬中選一的練武奇才, 那就要比別人多花點時間了. 請容我先用最近的AWS新聞來更新一下blog. 好啦, 因為確實不是新聞了, 所以標題改叫updates...</p>

<h2>AWS Import/Export for EBS</h2>


<p>這個Import/Export的功能可能在北美洲比較有用, 因為是寄硬碟去給Amazon, 讓Amazon依你的指示把資料從S3寫到硬碟或是相反方向. 如果要輸入/輸出大量資料, 例如幾TB, 絕對是用這個方法比較快. 現在EBS也支援AWS Import/Export了, 可以直接作成EBS snapshots, 這樣要複製多份EBS volumes就非常簡單了.</p>

<h2>AWS再降價</h2>


<p>是的, AWS又降價了. 這次是很重要的網路傳輸費, 從2011-07-01開始生效. 而且Amazon很康慨的把傳入AWS的費用全免了, 這樣計算網路傳輸費用也很簡單了. 很明顯, Amazon就是希望你把資料全部放到他家裡去. 這個用意再明顯也不過了, 資料一進去, 要出來就難了, 因為最難搬動的就是資料啊. 好了, 傳入全免費了, 那傳出的費用也降了. 以最貴的Tokyo地區來算, 每個月前10TB是每GB $0.201美金. 所以如果你的網站每個月輸出100GB, 那就是$20.1美金. 超大量的流量(每個月524TB以上)還可以和Amazon商量, 拿特別的折扣.
另一個和網路傳輸費最相關的服務, 就是CloudFront, 也一起降價了. 同樣以最貴的日本地區來看, 每個月前10TB的傳出費用也是降到每GB $0.201美金. 而且流量越大, 每GB的花費比AWS其它服務的網路傳輸費還便宜. 另外CloudFront也有Reserved Capacity Pricing, 和EC2 reserved instances概念類似, 也是先付年費, 就可以有較大的折扣. 不過要直接和Amazon聯絡, 而且每個月流量至少要10TB.</p>

<p>預告: 之後應該會開始把Hadoop的資料整理上來.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Survive AWS Judgment Day]]></title>
    <link href="http://hanklin.com/blog/2011/04/23/survive-aws-judgement-day"/>
    <updated>2011-04-23T10:36:33+08:00</updated>
    <id>http://hanklin.com/blog/2011/04/23/survive-aws-judgement-day</id>
    <content type="html"><![CDATA[<h2>SkyNet</h2>


<p>前幾天還看到很多朋友提醒, 2011-04-21就是<a href="http://en.wikipedia.org/wiki/Skynet_(Terminator)">SkyNet</a>開始發動攻擊的日子了. 這當然是搞笑, 但是沒想到, 真的把AWS打掛了! (沒錯, AWS掛掉的時間是美國2011-04-21) 這次的災情相當慘重, 可以說是一片混亂, 哀鴻遍野. 一直到現在截稿為止, 在美東地區還有一些EBS, EC2, RDS無法連線. 很多新興網站都掛了, 所以將來AWS應該要更小心, 因為除了自己掛掉, 自己也成為更明顯的目標.
我的news feed上有一大堆AWS的訊息, 可見AWS真是有夠多人在用的. 美國鄉民也發揮了許多創意, 搞笑諷刺都很成功. 有人趕快大讚自己有過人的先見之明, 能全身而退. 有人全力嘲諷, 也有人是不滿AWS掛掉, 但是明白自己的責任也不小.</p>

<h2>挖苦大軍</h2>


<p><a href="http://www.awsdowntime.com/">AWS Downtime counter</a>
提醒你目前AWS的Downtime, 目前還在不斷的流逝中...
<img src="http://hanklin.com/blog/wp-content/uploads/2011/04/2011-04-22-00678-300x198.png" alt="aws downtime count" title="aws downtime count" width="300" height="198" class="alignnone size-medium wp-image-174" />
<a href="http://awsdownti.me/">AWS Downtime</a>
好啦, awsdowntime.com被註冊了, 就改註冊 .me了! 已經掛很久啦, AWS!
<img src="http://hanklin.com/blog/wp-content/uploads/2011/04/2011-04-22-00680-300x201.png" alt="" title="aws downtime" width="300" height="201" class="alignnone size-medium wp-image-175" />
<a href="http://www.ec2disabled.com/">EC2 disabled</a>
上面列了被AWS影響到的網站, 真的有夠多的, 你也可以回報掛掉的網站. 不知道回報不是AWS架的網站會怎麼樣?
<img src="http://hanklin.com/blog/wp-content/uploads/2011/04/2011-04-23-00683-300x173.png" alt="" title="ec2 disable" width="300" height="173" class="alignnone size-medium wp-image-176" />
<a href="https://forums.aws.amazon.com/message.jspa?messageID=238872">SkyNet does not responsible for AWS outage</a>
有人在forum上面問了, AWS的人也很正經的問答了, 讓我憋著笑好難過啊! 不過這個阿宅梗好像很多人不知道, SkyNet就是魔鬼終結者, 裡面的機器人大軍. 而開始攻擊人類的日子有許多說法, 有一個就是2011-04-21啦!
還有人說, 其實SkyNet就是EC2! 但是還好, EC2掛了, 不然掛的就是我們人類了.</p>

<h2>封面與內容不符</h2>


<p>有幾篇文章, 講得很不錯, 主要就是一個重點, 就是AWS的地區與所在地的說法, 和這次的災情「封面與內容不符」! 原來AWS的所在地(Availability Zone)已經是獨立不受影響的資料中心了, 不應該一起掛掉. 尤其是us-east地區有4個Availability Zones, 應該要很容易可以換到別的Availability Zone繼續服務才對啊(如果你有備份好的話). 所以要嘛不是AWS沒有做好, 不然就是真的太倒霉一起掛掉. 我是看到有人說指定Availability Zone會沒有capacity, 但是不指定的話就能開EC2 instances了. 所以我猜後來大概是capacity不夠的關係.</p>

<ul>
<li><a href="http://justinsb.posterous.com/aws-down-why-the-sky-is-falling">AWS is down: Why the sky is falling</a></li>
<li><a href="http://www.geekwire.com/2011/amazoncoms-real-problem-outage-communication">Amazon.com&rsquo;s real problem isn&rsquo;t the outage, it&rsquo;s the communication</a></li>
</ul>




<h2>如何在AWS審判日存活</h2>


<p>好啦, 還是來看一點有建設性的文章. 重點有以下幾點:</p>

<ul>
<li>EBS snapshot: EBS volumes雖然是persistent, 但是無法跨Availability Zones. 定期對EBS volumes作snapshot還是很有必要, 除了有一個明確的回復點之外, 還可以用snapshot開新的EBS volumes在不同Availability Zones. 能夠較快速回復</li>
<li>如果把靜態檔案備份到S3上, 可以提高可用性. 比較簡單的服務不容易壞, 可以用S3或再加上CloudFront提供唯讀服務, 或是sorry頁面.</li>
<li>一台EC2 instance最好不要太多角色, 避免備份, 回復, 以及scale out的困難</li>
<li>最難搬的資料庫(尤其是RDBMS的話), 還是定期備份到S3一份. 雖然不能讓你馬上回復, 但是可以讓你在別的availability zone甚至region另起爐灶, 先提供read-only的服務(當然你要有作這些開關)</li>
</ul>


<p>
參考文章:</p>

<ul>
<li><a href="http://alestic.com/2011/04/ec2-outage">My Experience With the EC2 Judgment Day Outage</a></li>
<li><a href="http://www.twilio.com/engineering/2011/04/22/why-twilio-wasnt-affected-by-todays-aws-issues/">Why Twilio Wasn&rsquo;t Affected by Today&rsquo;s AWS Issues</a></li>
<li><a href="http://cloudability.com/single-points-of-failure">Single Points of Failure</a></li>
<li><a href="http://blog.dotcloud.com/working-around-the-ec2-outage">Working around the EC2 outage</a></li>
<li><a href="http://webmonkeyuk.wordpress.com/2011/04/21/how-to-work-around-amazon-ec2-outages/">How to work around Amazon EC2 outages</a></li>
</ul>


<p>好啦, 寫太多了, 不要再寫了, 我要準備講稿了. (打哈欠)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS goes down, web sites go down, too]]></title>
    <link href="http://hanklin.com/blog/2011/04/22/aws-down-web-down"/>
    <updated>2011-04-22T05:05:27+08:00</updated>
    <id>http://hanklin.com/blog/2011/04/22/aws-down-web-down</id>
    <content type="html"><![CDATA[<h2></h2>


<p>最近AWS有一些服務都有中斷的情況, 造成很多網站沒有辦法正常工作. 像是許多新興的網站: foursquare, quroa, reddit都無法連線, 想當然很多酸言酸語又出來了, 有的是笑說AWS怎麼會失效, 不是說設計成不會失效嗎? 有的說雲端運算果然還是沒有自有機房來的穩. 看到這些評論我也有些話想說.</p>

<h2>AWS從來沒說它never fail</h2>


<p>AWS有SLA的服務, 都有說明它的availability, 可以作為參考. 如果這個服務低於SLA說明的availability, 就會退一個比例的費用, 說明得很清楚. 風險在於, 你沒辦法控制AWS什麼時候失效. 自有機房或是傳統的租用主機就沒有這個風險了嗎? 如果你可以控制機器什麼時候失效, 那就不是風險了.
如果你有看AWS的<a href="http://status.aws.amazon.com/">health dashboard</a>, 就可以看到us-east地區的EC2以及其它一些服務有問題, 如果你使用這些地區的AWS服務, 就可能會被影響到. 但是如果你看一下其它地區, 如Asia或Europe, 就可以看到所有服務都正常. (和我猜想的一樣) AWS提供多地區的服務, 就是能夠讓你快速的把系統由不同地區的機房來服務. 我知道這個很難作到, 主因是放置資料通常還是只能在一處, 但是cloud computing讓這個作法成為可能.</p>

<h2>How much do you want to pay</h2>


<p>"雲端運算果然還是沒有自有機房來的穩", 這句話我同意, 但是我要問一句, 那你準備花多少錢? 除了機器硬體, 水電頻寬房租, 管理員薪水, 所有capacity都要以系統的最大使用量來計算. 如果要異地備援, 簡單的乘以2就好. 別忘了你要求的是高可用性, 所以硬體架構和管理員都要選high-end的. 我相信"雲端運算果然還是沒有自有機房來的穩", 但是一般網站或公司是花不起的.</p>

<h2>quora有情有義</h2>


<p>看一下這篇文章: <a href="http://thenextweb.com/industry/2011/04/21/amazon-ec2-troubles-bring-down-reddit-foursquare-quora-hootsuite-and-more/">Amazon EC2 troubles bring down Reddit, Foursquare, Quora, Hootsuite and more</a>, 我不得不說quora真是有情有義啊, quora寫道:
<quote>
  We&rsquo;d point fingers, but we wouldn&rsquo;t be where we are today without EC2.
<quote>
看! 如果我是Amazon的人, 我看到這句話眼淚都要掉下來了. 這句話包含了千言萬語, 新網站利用EC2快速擴充的能力, 快速壯大, 服務更多使用者. (當然, 掛掉了也有一個對象可以責怪, haha!)</p>

<h2>最近行程</h2>


<p>最近在準備一些training和演講, 我是可以都用同一套來講啦, 但是以我龜毛的作事態度, 我都會盡量重新編排內容, 所以會花我很多時間. 希望我可以更有效率的處理準備教材的事, 其實花最多時間的地方是找合適的圖, 因為漂亮的圖大部份都要授權, 所以常常要找好久啊!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spot EC2 Cluster Instances]]></title>
    <link href="http://hanklin.com/blog/2011/04/08/spot-ec2-cluster-instances"/>
    <updated>2011-04-08T19:51:26+08:00</updated>
    <id>http://hanklin.com/blog/2011/04/08/spot-ec2-cluster-instances</id>
    <content type="html"><![CDATA[<p>想要偷懶一下都不行, AWS新功能更新的很快, 其實我已經漏了一段時間的AWS新功能沒更新(很明顯, 大概就是之前4個月左右的新功能). 現在要來補完啦!</p>

<h2>EC2 Cluster Instances can be spot instances</h2>


<p>EC2提供的<a href="http://aws.amazon.com/hpc-applications/">HPC</a>, 如Cluster Compute 及Cluster GPU現在可以用Spot Instances計費了! 這真的很讚啊, Spot Instances一般比On-Demand便宜50%到60%, 所以想使用Cluster Compute及Cluster GPU, 又被高價嚇到的話, 可以試著結合Spot Instances來省錢! 我之前分享的<a href="http://hanklin.com/blog/p/146">"Multi-Region Uploading"</a>, 裡面的"Async. Worker"就非常適合使用Spot Instances計費啊! 完全不用怕被EC2關掉導致工作資料流失. 用這個來處理轉檔, 尤其是像CPU intensive的影片檔處理, 用Cluster Compute的instances是最適合的. 可以用很便宜的錢快速的轉好檔案, 是不是有點讓人心動了呢? 讓我也想寫個應用啊...</p>

<h2>S3 Encryption Client</h2>


<p>資料機密性, 是把資料放在服務提供者那邊最大的考量. 最簡單的作法是, 先把資料加密, 再傳到儲存服務上. 要讀取的時候, 下載好再解密, 很麻煩但是安全多了. 現在<a href="http://aws.amazon.com/sdkforjava/">AWS SDK for Java</a> 把這段也幫你作好了, 也就是改用<a href="http://docs.amazonwebservices.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/s3/AmazonS3EncryptionClient.html">AmazonS3EncryptionClient</a>這個class. 支援對稱(symmetric)和非對稱(asymmetric)兩種加密方式, 使用標準Java Cryptography Architecture (JCA)界面, 所以熟Java就可以很快上手. 不熟也沒關係, 看<a href="http://aws.amazon.com/articles/2850096021478074">這篇</a>改一改就可以了. 但是和一般資料機密性的問題一樣, 要安全, 就要帶來一些不便. 例如:</p>

<ul>
<li>AmazonS3EncryptionClient還不支援S3 Multipart upload</li>
<li>加密的資訊, 如: symmetric key, <a href="http://docs.amazonwebservices.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/s3/model/EncryptionMaterials.html">EncryptionMaterials</a> 也要和物件一併存起來. 預設是存在這個物件的metadata裡, 所以如果你有寫物件的metadata, 要注意不要超過2KB的限制. 如果有可能超過的話, 就要改用存在另外的物件的方式. (用<a href="http://docs.amazonwebservices.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/s3/model/CryptoStorageMode.html">CryptoStorageMode</a>選擇)</li>
<li>自己的KeyPair, SecretKey要保管好, 不然自己都解不開</li>
</ul>


<p>加密之後把機密資料放在S3應該可以增加不少信心度, 但是還是回到我常說的, 要加密的資料和不加密的資料一定要分開處理, 可以放不同buckets, 或是用不同object key prefix, 這樣才方便處理.</p>

<p>但是為什麼<a href="http://aws.amazon.com/sdkforjava/">AWS SDK for Java</a>始終都沒有出CloudFront的支援啦, 那個<a href="http://aws.amazon.com/sdkfornet/">AWS SDK for .NET</a>明明都有.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazon新功能: Cloud Drive]]></title>
    <link href="http://hanklin.com/blog/2011/03/30/amazon-cloud-drive"/>
    <updated>2011-03-30T21:32:48+08:00</updated>
    <id>http://hanklin.com/blog/2011/03/30/amazon-cloud-drive</id>
    <content type="html"><![CDATA[<h2>好康又來了</h2>


<p>很久沒有寫Amazon的新功能了，趕快來趕上進度一下，這個<a href="https://www.amazon.com/clouddrive">Cloud Drive</a>又是個好康的東西。所有Amazon使用者都有5GB的免費容量! 可以把在Amazon買的音樂直接放在這裡，然後用<a href="http://www.amazon.com/cloudplayer">Cloud Player</a>播放，還有Android、Mac等播放器，不過這個播放功能目前只有美國才能用。所以在台灣的我們，可以把Cloud Drive當成另一個免費的5GB網路空間啦! Cloud Drive後面當然也是使用Amazon自家的S3，不過Cloud Drive有專門作一個Web UI，比較簡單好用。Cloud Drive也可以昇級，有許多付費等級，20GB一年20美金，而且沒有網路傳輸費，比S3還便宜! AWS新的使用者，S3每個月前5GB是免費的，但剩下的15GB算起來是一年25.2美金(以最便宜的美東地區來計算)。但是S3是無限容量的啦，而且S3可以選「地區」(region)，每個物件又可以獨立用API操作，所以彈性還是比較大啦。不過當然還是希望AWS能再降價，過去降好幾次了，應該會再發生!</p>

<p>我一直想著拿著一台iphone或android走在路上搖頭晃腦聽音樂，如果用這個Cloud Drive就很方便啦，不用同步來同步去的。(可惜本人還是使用只能打電話的手機，哈哈!) 看了Amazon，我不禁想到一句：這叫其它廠商怎麼混啊!</p>
]]></content>
  </entry>
  
</feed>
